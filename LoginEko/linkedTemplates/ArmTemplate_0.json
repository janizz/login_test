{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "LoginEko"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase1'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntimeTest')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "North Europe",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 16,
							"timeToLive": 10,
							"cleanup": false
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/fendt_data_partitioned')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "fendt_data_partitioned.json",
						"container": "lgineko"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"datas": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"unit": {
										"type": "string"
									},
									"count": {
										"type": "string"
									},
									"values": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"value": {
													"type": "integer"
												},
												"timestamp": {
													"type": "string"
												}
											}
										}
									},
									"signalGroup": {
										"type": "string"
									},
									"type": {
										"type": "string"
									}
								}
							}
						},
						"count": {
							"type": "string"
						},
						"machineId": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/fendt_gps')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "fendt_gps.json",
						"container": "lgineko"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"route": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"lng": {
										"type": "number"
									},
									"lat": {
										"type": "number"
									},
									"t": {
										"type": "string"
									}
								}
							}
						},
						"machineId": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/telem_combined')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "lgineko"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/telematics')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "telematics_dump.csv",
						"container": "lgineko"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "DateTime",
						"type": "String"
					},
					{
						"name": "SerialNumber",
						"type": "String"
					},
					{
						"name": "GpsLongitude",
						"type": "String"
					},
					{
						"name": "GpsLatitude",
						"type": "String"
					},
					{
						"name": "TotalWorkingHours",
						"type": "String"
					},
					{
						"name": "Engine_rpm",
						"type": "String"
					},
					{
						"name": "EngineLoad",
						"type": "String"
					},
					{
						"name": "FuelConsumption_l_h",
						"type": "String"
					},
					{
						"name": "SpeedGearbox_km_h",
						"type": "String"
					},
					{
						"name": "SpeedRadar_km_h",
						"type": "String"
					},
					{
						"name": "TempCoolant_C",
						"type": "String"
					},
					{
						"name": "PtoFront_rpm",
						"type": "String"
					},
					{
						"name": "PtoRear_rpm",
						"type": "String"
					},
					{
						"name": "GearShift",
						"type": "String"
					},
					{
						"name": "TempAmbient_C",
						"type": "String"
					},
					{
						"name": "ParkingBreakStatus",
						"type": "String"
					},
					{
						"name": "DifferentialLockStatus",
						"type": "String"
					},
					{
						"name": "AllWheelDriveStatus",
						"type": "String"
					},
					{
						"name": "CreeperStatus",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/wialon')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "wialon_dump.csv.gz",
						"container": "lgineko"
					},
					"columnDelimiter": ",",
					"compressionCodec": "gzip",
					"compressionLevel": "Fastest",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "unit_id",
						"type": "String"
					},
					{
						"name": "dateTime",
						"type": "String"
					},
					{
						"name": "driverId",
						"type": "String"
					},
					{
						"name": "gpsLongitude",
						"type": "String"
					},
					{
						"name": "gpsLatitude",
						"type": "String"
					},
					{
						"name": "speed",
						"type": "String"
					},
					{
						"name": "altitude",
						"type": "String"
					},
					{
						"name": "course",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ConsolidatedTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "telemetricsConsolidated"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/telemetry_combine')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "telematics",
								"type": "DatasetReference"
							},
							"name": "srctelematics"
						},
						{
							"dataset": {
								"referenceName": "fendt_data_partitioned",
								"type": "DatasetReference"
							},
							"name": "srcfendt"
						},
						{
							"dataset": {
								"referenceName": "wialon",
								"type": "DatasetReference"
							},
							"name": "srcwialon"
						},
						{
							"dataset": {
								"referenceName": "fendt_gps",
								"type": "DatasetReference"
							},
							"name": "srcFendtGps"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ConsolidatedTable",
								"type": "DatasetReference"
							},
							"name": "SQLDB"
						}
					],
					"transformations": [
						{
							"name": "unionAllTelem"
						},
						{
							"name": "filter1"
						},
						{
							"name": "datas"
						},
						{
							"name": "values"
						},
						{
							"name": "tstpDateTime"
						},
						{
							"name": "pivot1"
						},
						{
							"name": "fendtDataNoGps"
						},
						{
							"name": "flattenRoute"
						},
						{
							"name": "telematicsOut"
						},
						{
							"name": "joinFendt"
						},
						{
							"name": "fendtGpsOut"
						},
						{
							"name": "fendtOut"
						},
						{
							"name": "selectWialonInter"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "wialonOut"
						}
					],
					"scriptLines": [
						"source(output(",
						"          DateTime as string,",
						"          SerialNumber as string,",
						"          GpsLongitude as double,",
						"          GpsLatitude as double,",
						"          TotalWorkingHours as double,",
						"          Engine_rpm as short,",
						"          EngineLoad as short,",
						"          FuelConsumption_l_h as double,",
						"          SpeedGearbox_km_h as double,",
						"          SpeedRadar_km_h as double,",
						"          TempCoolant_C as short,",
						"          PtoFront_rpm as boolean,",
						"          PtoRear_rpm as boolean,",
						"          GearShift as string,",
						"          TempAmbient_C as double,",
						"          ParkingBreakStatus as boolean,",
						"          DifferentialLockStatus as short,",
						"          AllWheelDriveStatus as string,",
						"          CreeperStatus as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     limit: 10000,",
						"     ignoreNoFilesFound: false) ~> srctelematics",
						"source(output(",
						"          datas as (unit as string, count as string, values as (value as integer, timestamp as string)[], signalGroup as string, type as string)[],",
						"          count as string,",
						"          machineId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     limit: 1000,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> srcfendt",
						"source(output(",
						"          unit_id as string,",
						"          dateTime as string,",
						"          driverId as string,",
						"          gpsLongitude as string,",
						"          gpsLatitude as string,",
						"          speed as string,",
						"          altitude as string,",
						"          course as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     limit: 10000,",
						"     ignoreNoFilesFound: false) ~> srcwialon",
						"source(output(",
						"          route as (lng as double, lat as double, t as string)[],",
						"          machineId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     limit: 1000,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> srcFendtGps",
						"telematicsOut, wialonOut, fendtOut union(byName: true)~> unionAllTelem",
						"datas filter(/* type == \"EngineSpeed\" || type == \"FuelLevel\" || type == \"OutdoorTemp\" */\r",
						"1 == 1) ~> filter1",
						"srcfendt foldDown(unroll(datas),",
						"     mapColumn(",
						"          count,",
						"          machineId,",
						"          unit = datas.unit,",
						"          signalGroup = datas.signalGroup,",
						"          type = datas.type,",
						"          values = datas.values,",
						"          {datas.count} = datas.count",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> datas",
						"filter1 foldDown(unroll(values),",
						"     mapColumn(",
						"          count,",
						"          machineId,",
						"          unit,",
						"          signalGroup,",
						"          type,",
						"          {datas.count},",
						"          value = values.value,",
						"          timestamp = values.timestamp",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> values",
						"values derive(DateTime = toTimestamp(toInteger(timestamp)*1000l)) ~> tstpDateTime",
						"fendtDataNoGps pivot(groupBy(Timestamp,",
						"          VehicleId,",
						"          timestamp_t),",
						"     pivotBy(type),",
						"     {} = max(value),",
						"     columnNaming: '$N$V',",
						"     lateral: false) ~> pivot1",
						"tstpDateTime select(mapColumn(",
						"          Timestamp = DateTime,",
						"          VehicleId = machineId,",
						"          type,",
						"          value,",
						"          timestamp_t = timestamp",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> fendtDataNoGps",
						"srcFendtGps foldDown(unroll(route),",
						"     mapColumn(",
						"          machineId,",
						"          timestamp = route.t,",
						"          longitude = route.lng,",
						"          latitude = route.lat",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenRoute",
						"derivedColumn1 select(mapColumn(",
						"          VehicleId = SerialNumber,",
						"          GpsLongitude,",
						"          GpsLatitude,",
						"          TotalWorkingHours,",
						"          Engine_rpm,",
						"          EngineLoad,",
						"          FuelConsumption_l_h,",
						"          SpeedGearbox_km_h,",
						"          SpeedRadar_km_h,",
						"          TempCoolant_C,",
						"          PtoFront_rpm,",
						"          PtoRear_rpm,",
						"          GearShift,",
						"          TempAmbient_C,",
						"          ParkingBreakStatus,",
						"          DifferentialLockStatus,",
						"          AllWheelDriveStatus,",
						"          CreeperStatus,",
						"          Timestamp",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> telematicsOut",
						"pivot1, fendtGpsOut join(VehicleId == machineId",
						"     && timestamp_t == fendtGpsOut@timestamp,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinFendt",
						"flattenRoute select(mapColumn(",
						"          machineId,",
						"          timestamp,",
						"          GpsLongitude = longitude,",
						"          GpsLatitude = latitude",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> fendtGpsOut",
						"joinFendt select(mapColumn(",
						"          Timestamp = pivot1@Timestamp,",
						"          VehicleId,",
						"          machineId,",
						"          timestamp = fendtGpsOut@timestamp,",
						"          GpsLongitude,",
						"          GpsLatitude",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> fendtOut",
						"derivedColumn2 select(mapColumn(",
						"          VehicleId = unit_id,",
						"          Timestamp,",
						"          driverId,",
						"          GpsLongitude = gpsLongitude,",
						"          GpsLatitude = gpsLatitude,",
						"          speed,",
						"          altitude,",
						"          course",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectWialonInter",
						"srctelematics derive(Timestamp = toTimestamp(DateTime)) ~> derivedColumn1",
						"srcwialon derive(Timestamp = toTimestamp(dateTime)) ~> derivedColumn2",
						"selectWialonInter cast(output(",
						"          GpsLongitude as double,",
						"          GpsLatitude as double",
						"     ),",
						"     errors: true) ~> wialonOut",
						"unionAllTelem sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> SQLDB"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/telematics')]",
				"[concat(variables('factoryId'), '/datasets/fendt_data_partitioned')]",
				"[concat(variables('factoryId'), '/datasets/wialon')]",
				"[concat(variables('factoryId'), '/datasets/fendt_gps')]",
				"[concat(variables('factoryId'), '/datasets/ConsolidatedTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "run_Telemetry_combine",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 1,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "telemetry_combine",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srctelematics": {},
									"srcfendt": {},
									"srcwialon": {},
									"srcFendtGps": {},
									"SQLDB": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/telemetry_combine')]"
			]
		}
	]
}