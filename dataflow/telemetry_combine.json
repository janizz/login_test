{
	"name": "telemetry_combine",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "telematics",
						"type": "DatasetReference"
					},
					"name": "srctelematics"
				},
				{
					"dataset": {
						"referenceName": "fendt_data_partitioned",
						"type": "DatasetReference"
					},
					"name": "srcfendt"
				},
				{
					"dataset": {
						"referenceName": "wialon",
						"type": "DatasetReference"
					},
					"name": "srcwialon"
				},
				{
					"dataset": {
						"referenceName": "fendt_gps",
						"type": "DatasetReference"
					},
					"name": "srcFendtGps"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable1",
						"type": "DatasetReference"
					},
					"name": "SQLDB"
				}
			],
			"transformations": [
				{
					"name": "union1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "datas"
				},
				{
					"name": "values"
				},
				{
					"name": "cast1"
				},
				{
					"name": "tstpDateTime"
				},
				{
					"name": "pivot1"
				},
				{
					"name": "fendtDataNoGps"
				},
				{
					"name": "flattenRoute"
				},
				{
					"name": "telematicsOut"
				},
				{
					"name": "cast2"
				},
				{
					"name": "joinFendt"
				},
				{
					"name": "fendtGpsOut"
				},
				{
					"name": "fendtOut"
				},
				{
					"name": "cast3"
				},
				{
					"name": "wialonOut"
				}
			],
			"scriptLines": [
				"source(output(",
				"          DateTime as string,",
				"          SerialNumber as string,",
				"          GpsLongitude as string,",
				"          GpsLatitude as string,",
				"          TotalWorkingHours as string,",
				"          Engine_rpm as string,",
				"          EngineLoad as string,",
				"          FuelConsumption_l_h as string,",
				"          SpeedGearbox_km_h as string,",
				"          SpeedRadar_km_h as string,",
				"          TempCoolant_C as string,",
				"          PtoFront_rpm as string,",
				"          PtoRear_rpm as string,",
				"          GearShift as string,",
				"          TempAmbient_C as string,",
				"          ParkingBreakStatus as string,",
				"          DifferentialLockStatus as string,",
				"          AllWheelDriveStatus as string,",
				"          CreeperStatus as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     limit: 10000,",
				"     ignoreNoFilesFound: false) ~> srctelematics",
				"source(output(",
				"          datas as (unit as string, count as string, values as (value as integer, timestamp as string)[], signalGroup as string, type as string)[],",
				"          count as string,",
				"          machineId as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     limit: 1000,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> srcfendt",
				"source(output(",
				"          unit_id as string,",
				"          dateTime as string,",
				"          driverId as string,",
				"          gpsLongitude as string,",
				"          gpsLatitude as string,",
				"          speed as string,",
				"          altitude as string,",
				"          course as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 10000,",
				"     ignoreNoFilesFound: false) ~> srcwialon",
				"source(output(",
				"          route as (lng as double, lat as double, t as string)[],",
				"          machineId as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 1000,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> srcFendtGps",
				"telematicsOut, wialonOut, fendtOut union(byName: true)~> union1",
				"datas filter(/* type == \"EngineSpeed\" || type == \"FuelLevel\" || type == \"OutdoorTemp\" */\r",
				"1 == 1) ~> filter1",
				"srcfendt foldDown(unroll(datas),",
				"     mapColumn(",
				"          count,",
				"          machineId,",
				"          unit = datas.unit,",
				"          signalGroup = datas.signalGroup,",
				"          type = datas.type,",
				"          values = datas.values,",
				"          {datas.count} = datas.count",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> datas",
				"filter1 foldDown(unroll(values),",
				"     mapColumn(",
				"          count,",
				"          machineId,",
				"          unit,",
				"          signalGroup,",
				"          type,",
				"          {datas.count},",
				"          value = values.value,",
				"          timestamp = values.timestamp",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> values",
				"srcwialon cast(output(",
				"          dateTime as timestamp",
				"     ),",
				"     errors: true) ~> cast1",
				"values derive(DateTime = toTimestamp(toInteger(timestamp)*1000l)) ~> tstpDateTime",
				"fendtDataNoGps pivot(groupBy(Timestamp,",
				"          VehicleId,",
				"          timestamp_t),",
				"     pivotBy(type),",
				"     {} = max(value),",
				"     columnNaming: '$N$V',",
				"     lateral: false) ~> pivot1",
				"tstpDateTime select(mapColumn(",
				"          Timestamp = DateTime,",
				"          VehicleId = machineId,",
				"          type,",
				"          value,",
				"          timestamp_t = timestamp",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> fendtDataNoGps",
				"srcFendtGps foldDown(unroll(route),",
				"     mapColumn(",
				"          machineId,",
				"          timestamp = route.t,",
				"          longitude = route.lng,",
				"          latitude = route.lat",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flattenRoute",
				"cast2 select(mapColumn(",
				"          Timestamp = DateTime,",
				"          VehicleId = SerialNumber,",
				"          GpsLongitude,",
				"          GpsLatitude,",
				"          TotalWorkingHours,",
				"          Engine_rpm,",
				"          EngineLoad,",
				"          FuelConsumption_l_h,",
				"          SpeedGearbox_km_h,",
				"          SpeedRadar_km_h,",
				"          TempCoolant_C,",
				"          PtoFront_rpm,",
				"          PtoRear_rpm,",
				"          GearShift,",
				"          TempAmbient_C,",
				"          ParkingBreakStatus,",
				"          DifferentialLockStatus,",
				"          AllWheelDriveStatus,",
				"          CreeperStatus",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> telematicsOut",
				"srctelematics cast(output(",
				"          DateTime as timestamp",
				"     ),",
				"     errors: true) ~> cast2",
				"pivot1, fendtGpsOut join(VehicleId == machineId",
				"     && timestamp_t == fendtGpsOut@timestamp,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinFendt",
				"cast3 select(mapColumn(",
				"          machineId,",
				"          timestamp,",
				"          GpsLongitude = longitude,",
				"          GpsLatitude = latitude",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> fendtGpsOut",
				"joinFendt select(mapColumn(",
				"          VehicleId,",
				"          Timestamp = pivot1@Timestamp,",
				"          GpsLongitude,",
				"          GpsLatitude",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> fendtOut",
				"flattenRoute cast(output(",
				"          longitude as string,",
				"          latitude as string",
				"     ),",
				"     errors: true) ~> cast3",
				"cast1 select(mapColumn(",
				"          VehicleId = unit_id,",
				"          Timestamp = dateTime,",
				"          driverId,",
				"          GpsLongitude = gpsLongitude,",
				"          GpsLatitude = gpsLatitude,",
				"          speed,",
				"          altitude,",
				"          course",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> wialonOut",
				"union1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> SQLDB"
			]
		}
	}
}